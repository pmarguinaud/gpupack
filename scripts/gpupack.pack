#!/bin/bash

function ecSDK_clone ()
{
  pack=$1
  mkdir -p $pack/hub/local/src/ecSDK
  cd $pack/hub/local/src/ecSDK
  git clone --branch 3.7.0  https://github.com/ecmwf/ecbuild
  git clone --branch 1.19.0 https://github.com/ACCORD-NWP/eckit.git
  git clone --branch 0.9.5  https://github.com/ecmwf/fckit
}

function Fiat_clone ()
{
  pack=$1
  mkdir -p $pack/hub/local/src/Fiat
  cd $pack/hub/local/src/Fiat
# git clone --branch for-CY49T1 https://github.com/ACCORD-NWP/fiat
  git clone --branch 49t1-mplacc https://github.com/pmarguinaud/fiat.git
}

function Ectrans_clone ()
{
  pack=$1
  mkdir -p $pack/hub/local/src/Ectrans
  cd $pack/hub/local/src/Ectrans
  case "$ECTRANS_GPU" in
    "ON")
      git clone --branch arpege_integration_for_cy49t1 https://github.com/dareg/ectrans_nvidia ectrans
      ;;
    "OFF")
      git clone --branch for-CY49T1 https://github.com/ACCORD-NWP/ectrans
      ;;
    *)
      echo "Error, ECTRANS_GPU should be set to either OFF or ON"
      exit 1
      ;;
  esac
}

function OOPS_clone ()
{
  pack=$1
  mkdir -p $pack/hub/local/src/OOPS
  cd $pack/hub/local/src/OOPS
  git clone --branch for-CY49T1 https://github.com/ACCORD-NWP/oops oops_src
}

function FieldAPI_clone ()
{
  pack=$1
  mkdir -p $pack/hub/local/src/FieldAPI
  cd $pack/hub/local/src/FieldAPI
# git clone https://github.com/ecmwf-ifs/field_api
  git clone --branch shuffle-restrict-stat https://github.com/pmarguinaud/field_api
}

function pack_create ()
{
  set -e

  if [ "$ECTRANS_GPU" = "ON" ]
  then

    ARCH_ECTRANS_GPU="${ARCH}ECTRANSGPU"

    if [ ! -f "$GMK_SUPPORT/arch/$ARCH_ECTRANS_GPU.$OPT" ]
    then
      cp $GMK_SUPPORT/arch/$ARCH.$OPT $GMK_SUPPORT/arch/$ARCH_ECTRANS_GPU.$OPT
      perl -i -pe "s/$ARCH/$ARCH_ECTRANS_GPU/go;" $GMK_SUPPORT/arch/$ARCH_ECTRANS_GPU.$OPT
    fi

    if [ ! -L "$GMK_SUPPORT/wrap/$ARCH_ECTRANS_GPU" ]
    then
      ln -s $ARCH $GMK_SUPPORT/wrap/$ARCH_ECTRANS_GPU
    fi

    if [ ! -L "$GPUPACK_PREFIX/install/$ARCH_ECTRANS_GPU" ]
    then
      ln -s $ARCH $GPUPACK_PREFIX/install/$ARCH_ECTRANS_GPU
    fi

    ARCH=$ARCH_ECTRANS_GPU

  fi

  PACK=$GPUPACK_PREFIX/pack/${CYCLE}_${BRANCH}.01.${ARCH}.${OPT}
  
  if [ ! -d "$PACK" ]
  then
  
  $GPUPACK_PREFIX/gmkpack/util/gmkpack -r $CYCLE -b $BRANCH -a -n 01 -l $ARCH -o $OPT -p masterodb -K
  
  cd $PACK
  
  GPU=$(perl -e ' local $/ = undef; my $gmkfile = <>; $gmkfile =~ m/GPU\s+=\s+(\S+)/goms; print $1' .gmkfile/*)

  perl -i -pe "
    s/GMK_THREADS=\d+/GMK_THREADS=16; export ARCH=$ARCH/go;
    s/GMK_MAKE=ON/GMK_MAKE=OFF/go;
    s/GMK_INSTALL=ON/GMK_INSTALL=OFF/go;
    s/\\\$GPU\b/$GPU/go; 
  " ics_masterodb

  cp ics_masterodb ld_masterodb
  
  perl -i -pe "
    s/ICS_RECURSIVE_UPDATE=yes/ICS_RECURSIVE_UPDATE=no/go;
    s/ICS_ICFMODE=full/ICS_ICFMODE=off/go;
    s/ICS_UPDLIBS=full/ICS_UPDLIBS=off/go;
  " ld_masterodb


  perl -i -pe "s/GMK_THREADS=\d+/GMK_THREADS=16; export ARCH=$ARCH/go" ics_packages
  perl -i -pe "
    s,\\\$GPUPACK_PREFIX\b,$GPUPACK_PREFIX,go; 
    s/\\\$ARCH\b/$ARCH/go; 
    s/\\\$HOME\b/\$ENV{HOME}/go;
    s/\\\$GPU\b/$GPU/go; 
  " .gmkfile/$ARCH

  gitpack --init --repo $REPO --branch ${CYCLE}_${BRANCH}

  for lib in ecSDK Fiat Ectrans OOPS FieldAPI 
  do
    set -e
    ${lib}_clone $PACK
  done

  fi

  cd $PACK
}

function pack_compile ()
{
  set -e

  trap '' ERR

  PACK=$GPUPACK_PREFIX/pack/${CYCLE}_${BRANCH}.01.${ARCH}.${OPT}
  
  cd $PACK
  
  for prog in ics_packages ics_masterodb
  do
    ./$prog 2>&1 | tee $prog.eo
  done

  if [ ! -f "bin/MASTERODB" ]
  then
    exit 1
  fi

  lockpack -f

  $GPUPACK_PREFIX/scripts/parallelmethod.pl .
}


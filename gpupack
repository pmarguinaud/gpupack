#!/bin/bash

set -e

export GPUPACK_PREFIX=$(dirname $0)
GPUPACK_PREFIX=$(perl -e ' use File::Spec; print File::Spec->rel2abs ($ARGV[0]) ' $GPUPACK_PREFIX)

# Cycle & a branch

export CYCLE=49t2
export BRANCH=openacc
export REPO=https://github.com/pmarguinaud/IAL.git
export ECTRANS_GPU=OFF

# Architecture flavor

export OPT=1d

# Compiler

export ARCH=NVHPC2403

# Do everything and compile

export COMPILE=ON

# Do everything in screen session

export SCREEN=OFF

# gmkpack options subset

err=0
hlp=0

while getopts 'r:b:l:o:R:GNSH' option
do
   case $option in
   r)  CYCLE=$OPTARG;;
   b)  BRANCH=$OPTARG;;
   l)  ARCH=$OPTARG;;
   o)  OPT=$OPTARG;;
   R)  REPO=$OPTARG;;
   G)  ECTRANS_GPU="ON";;
   N)  COMPILE="OFF";;
   S)  SCREEN="ON";;
   H)  hlp=1;;
   \?) err=1;;
   esac 
done

if [ $err -eq 1 ]
then
  exit 1
fi

if [ $hlp -eq 1 ]
then
  echo "Usage: $(basename $0)"
  echo "   -r CYCLE  (default $CYCLE)"
  echo "   -b BRANCH (default $BRANCH)"
  echo "   -l ARCH   (default $ARCH) "
  echo "   -o OPT    (default $OPT)"
  echo "   -R REPO   (default $REPO)"
  echo "   -G (enable ectrans GPU, default NO)"
  echo "   -N (create the pack, do not compile)"
  echo "   -S (do everything in a screen sesssion)"
  exit 0
fi

set -x

cd $GPUPACK_PREFIX

if [ "$SCREEN" == "ON" ]
then

  init=$(mktemp --suffix .gpupack.sh)
  chmod 755 $init

  cat > $init << EOF
if [ -f ~/.bashrc ]
then
  source ~/.bashrc
fi


function catchError ()
{
   set +e
   init=\$(mktemp --suffix .error.gpupack.sh)
   cat > \$init << EOE
echo "An error occurred"
echo "If you can fix it, then leave this shell with 'exit 0'"
echo "Otherwise, leave this shell with 'exit 1'"
export PS1='FIX> '
EOE
   bash --rcfile \$init -i
   c=\$?
   if [ \$c -ne 0 ]
   then
     # Leave the program
     exit 1
   fi
   # Resume build after error
}

trap 'catchError' ERR

source "$GPUPACK_PREFIX/scripts/gpupack"

run_gpupack

trap '' ERR

EOF
  
  screen -S gpupack bash --rcfile $init -i

else 

  source "$GPUPACK_PREFIX/scripts/gpupack"
  run_gpupack

fi

